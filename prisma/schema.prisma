// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @map("user_id") @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    email         String   @unique
    emailVerified DateTime? @map("email_verified")
    phoneNumber   String?
    biography     String?
    image         String?
    contract      Bytes?
    verified      Boolean?
    socials       String[]
    accounts      Account[]
    sessions      Session[]
    createdListingIds String[]
    listings      Listing[] @relation("listings") 
    likedListingIds String[] @db.ObjectId
    likedListings Listing[] @relation("likedListings", fields: [likedListingIds], references: [id])
    
    @@map("users")
}


model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

enum Tag {
    PET_FRIENDLY
    SMOKE_FRIENDLY
    FREE_PARKING
    FREE_WIFI
    POOL
}

enum RoomType {
  Single 
  Double
  Triple
  Quad
}



model Listing {
    id             String @id @default(auto()) @map("_id") @db.ObjectId
    title          String
    price          Int
    sharedSpace Boolean
    bedrooms       Int
    bathrooms      Int
    occupants      Json?
    roomType        RoomType?
    location        Json 
    descriptionTags     Tag[]
    addressString      String
    imageSrcs       String[]
    createdById     String
    createdBy       User @relation("listings", fields: [createdById], references: [id])
    likedByIds String[] @db.ObjectId
    likedBy         User[] @relation("likedListings", fields: [likedByIds], references: [id])
    createdAt       DateTime 
    listingStart    DateTime
    listingEnd      DateTime
    @@map("listings")
}

model Email {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}

